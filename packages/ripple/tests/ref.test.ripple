import { describe, it, expect, beforeEach, afterEach } from 'vitest';

import { mount, flushSync, ref } from 'ripple';

describe('ref()', () => {
	let container;

	function render(component) {
		mount(component, {
			target: container
		});
	}

	beforeEach(() => {
		container = document.createElement('div');
		document.body.appendChild(container);
	});

	afterEach(() => {
		document.body.removeChild(container);
	});

	it('creates a reactive ref with initial value', () => {
		component TestRef() {
			let $count = 5;

			<div><span id='count'>{$count}</span></div>
		}

		render(TestRef);

		expect(container.querySelector('#count').textContent).toBe('5');
	});

	it('updates when ref value changes', () => {
		component TestRef() {
			let $count = 0;

			<div>
				<span id='count'>{$count}</span>
				<button id='btn' onClick={() => $count++}>{'Increment'}</button>
			</div>
		}

		render(TestRef);

		expect(container.querySelector('#count').textContent).toBe('0');

		container.querySelector('#btn').click();
		flushSync();

		expect(container.querySelector('#count').textContent).toBe('1');
	});
});