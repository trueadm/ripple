import { describe, it, expect } from 'vitest';
import { render } from 'ripple/server';

describe('if statements in SSR', () => {
	it('renders if block when condition is true', async () => {
		component App() {
			let condition = true;

			if (condition) {
				<div>{'If block'}</div>
			}
		}

		const { body } = await render(App);
		expect(body).toBe('<div>If block</div>');
	});

	it('renders else block when condition is false', async () => {
		component App() {
			let condition = false;

			if (condition) {
				<div>{'If block'}</div>
			} else {
				<div>{'Else block'}</div>
			}
		}

		const { body } = await render(App);
		expect(body).toBe('<div>Else block</div>');
	});

	it('renders else if block when condition is true', async () => {
		component App() {
			let value = 'b';

			if (value === 'a') {
				<div>{'Case A'}</div>
			} else if (value === 'b') {
				<div>{'Case B'}</div>
			} else {
				<div>{'Default Case'}</div>
			}
		}

		const { body } = await render(App);
		expect(body).toBe('<div>Case B</div>');
	});

	it('renders final else block in an if-else if-else chain', async () => {
		component App() {
			let value = 'c';

			if (value === 'a') {
				<div>{'Case A'}</div>
			} else if (value === 'b') {
				<div>{'Case B'}</div>
			} else {
				<div>{'Default Case'}</div>
			}
		}

		const { body } = await render(App);
		expect(body).toBe('<div>Default Case</div>');
	});
});
