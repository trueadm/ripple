import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { mount, createContext, flushSync, track } from 'ripple';

describe('context', () => {
	let container;

	function render(component) {
		mount(component, {
			target: container
		});
	}

	beforeEach(() => {
		container = document.createElement('div');
		document.body.appendChild(container);
	});

	afterEach(() => {
		document.body.removeChild(container);
	});

	it('creates a reactive ref with initial value', () => {
		const MyContext = createContext(null);

		component Child() {
			const value = MyContext.get();

			<div>{value}</div>
		}

		component TestContext() {
			const value = MyContext.get();

			MyContext.set("Hello from context!");

			<Child />
		}

		render(TestContext);

		expect(container.querySelector('div').textContent).toBe('Hello from context!');
	});

	it('handles context captured inside a computed tracked', () => {
		
		const MyContext = createContext(null)

		const doubleContext = () => {
			const value = MyContext.get()
			return value * 2
		}

		component App() {
			MyContext.set(4)
				
			<h3>{MyContext.get()}</h3>

			<h4>{'2x:'} {doubleContext()}</h4>

			MyContext.set(8)
		}

		render(App);
		flushSync();
	});
});
