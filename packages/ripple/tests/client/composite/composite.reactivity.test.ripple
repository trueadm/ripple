import { track, flushSync, effect } from 'ripple';

describe('composite > reactivity', () => {
	it('renders composite components with object state', () => {
		component Button({ obj }: { obj: { count: Tracked<number> } }) {
			<button class='count2' onClick={() => {
				obj.@count++;
			}}>{obj.@count}</button>
		}

		component App() {
			<div>
				let obj = {
					count: track(0)
				};

				<span class='count'>{obj.@count}</span>
				<Button obj={obj} />
			</div>
		}

		render(App);

		const button = container.querySelector('button');

		button.click();
		flushSync();

		expect(container.querySelector('.count').textContent).toBe('1');
		expect(container.querySelector('.count2').textContent).toBe('1');
	});

	it('renders composite components with object state wrapped in an if statement', () => {
		component Button({ obj }: { obj: { count: Tracked<number> } }) {
			<button class='count2' onClick={() => {
				obj.@count++;
			}}>{obj.@count}</button>
		}

		component OtherComponent({ obj }: { obj: { count: Tracked<number> } }) {
			<div class='count3'>{obj.@count}</div>
		}

		component App() {
			<div>
				let obj = {
					count: track(0)
				};

				<span class='count'>{obj.@count}</span>
				<span>{' '}</span>
				if (obj) {
					<Button obj={obj} />
				}

				if (obj) {
					<OtherComponent obj={obj} />
				}
			</div>
		}

		render(App);

		const button = container.querySelector('button');

		button.click();
		flushSync();

		expect(container.querySelector('.count').textContent).toBe('1');
		expect(container.querySelector('.count2').textContent).toBe('1');
		expect(container.querySelector('.count3').textContent).toBe('1');
	});

	it('parents and children have isolated state', () => {
		component Button(props: { count: number }) {
			let count = track(() => props.count);
			<button onClick={() => { @count++; } }>{"child: " + @count}</button>
		}

		component App() {
			<div>
				let count = track(0);

				<button onClick={() => { @count++; } }>{"parent: " + @count}</button>
				<Button {@count} />
			</div>
		}

		render(App);

		const buttons = container.querySelectorAll('button');

		expect(buttons[0].textContent).toBe('parent: 0');
		expect(buttons[1].textContent).toBe('child: 0');

		buttons[0].click();
		flushSync();

		expect(buttons[0].textContent).toBe('parent: 1');
		expect(buttons[1].textContent).toBe('child: 1');

		buttons[1].click();
		flushSync();

		expect(buttons[0].textContent).toBe('parent: 1');
		expect(buttons[1].textContent).toBe('child: 2');
	});

	it('parents and children have isolated connected state (destructured props)', () => {
		component Button({count}: { count: number }) {
			let local_count = track(() => count);
			<button onClick={() => { @local_count++; } }>{"child: " + @local_count}</button>
		}

		component App() {
			<div>
				let count = track(0);

				<button onClick={() => { @count++; } }>{"parent: " + @count}</button>
				<Button {@count} />
			</div>
		}

		render(App);

		const buttons = container.querySelectorAll('button');

		expect(buttons[0].textContent).toBe('parent: 0');
		expect(buttons[1].textContent).toBe('child: 0');

		buttons[0].click();
		flushSync();

		expect(buttons[0].textContent).toBe('parent: 1');
		expect(buttons[1].textContent).toBe('child: 1');

		buttons[1].click();
		flushSync();

		expect(buttons[0].textContent).toBe('parent: 1');
		expect(buttons[1].textContent).toBe('child: 2');
	});

	it('handles spreading of props', () => {
		let logs: string[] = [];

		component App() {
			const a = track(1);
			const b = track(2);
			const c = track(3);

			const obj = track(() => ({
				@a,
				@b,
				@c,
			}));

			<Child {...@obj} />

			<button onClick={() => { @a++; @b++; @c++; }}>{"Increment all"}</button>
		}

		component Child({ a, b, c }: { a: number; b: number; c: number }) {
			effect(() => {
				logs.push(`Child effect: ${a}, ${b}, ${c}`);
			});

			<div>{a + ' ' +  b + ' ' + c}</div>
		}

		render(App);
		flushSync();

		expect(container.querySelector('div').textContent).toBe('1 2 3');
		expect(logs).toEqual(['Child effect: 1, 2, 3']);

		const button = container.querySelector('button');
		button.click();
		flushSync();

		expect(container.querySelector('div').textContent).toBe('2 3 4');
		expect(logs).toEqual(['Child effect: 1, 2, 3', 'Child effect: 2, 3, 4']);
	});
});
