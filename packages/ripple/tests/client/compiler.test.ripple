import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { mount, TrackedArray, track } from 'ripple';
import { parse } from 'ripple/compiler'

describe('compiler success tests', () => {
  let container;

	function render(component) {
		mount(component, {
			target: container
		});
	}

	beforeEach(() => {
		container = document.createElement('div');
		document.body.appendChild(container);
	});

	afterEach(() => {
		document.body.removeChild(container);
		container = null;
	});


	it('Parses style content correctly', () => {
		const source = `export component App() {
  <div id="myid" class="myclass">{"Hello World"}</div>

  <style>#style</style>
}`;
		const style1 = '.myid {color: green }';
		const style2 = '#myid {color: green }';
		const style3 = 'div {color: green }';

		let input = source.replace('#style', style1);
		let ast = parse(input);
		expect(ast.body[0].declaration.css.source).toEqual(style1);

		input = source.replace('#style', style2);
		ast = parse(input);
		expect(ast.body[0].declaration.css.source).toEqual(style2);

		input = source.replace('#style', style3);
		ast = parse(input);
		expect(ast.body[0].declaration.css.source).toEqual(style3);
	});

  it('renders without crashing', () => {
		component App() {
			let foo;
			let bar;
			let baz;

			foo = {};
			foo = {'test': 0};
			foo['abc'] = 123;

			bar = { 'def': 456 };

			baz = { 'ghi': 789 };
			baz['jkl'] = 987;
		}

		render(App);
	});


  	it('renders without crashing using < character', () => {
		component App() {
			function bar() {
        for (let i = 0; i < 10; i++) {
          // do nothing
        }
        const x = 1 < 1;
      }

			let x = 5 < 10

      <div>{x}</div>
		}

		render(App);
	});

	it('render lexical blocks without crashing', () => {
		component App() {
			<div>
				const a = 1;
				<div>
					const b = 1;
				</div>
				<div>
					const b = 1;
				</div>
			</div>
			<div>
				const a = 2;
				<div>
					const b = 1;
				</div>
			</div>
		}

		render(App);
	});

	it('properly handles JS assignments, reads and updates to array indices', () => {
		const logs = [];

		component App() {
			let items = [];
			let tracked_items = track([]);
			let items2 = new Array();
			let items3 = new TrackedArray();
			let i = 0;

			logs.push(items[0]);
			logs.push(items[i]);
			logs.push(@tracked_items[0]);
			logs.push(@tracked_items[i]);
			logs.push(items2[0]);
			logs.push(items2[i]);
			logs.push(items3[0]);
			logs.push(items3[i]);

			items[0] = 123;
			items[i] = 123;
			@tracked_items[0] = 123;
			@tracked_items[i] = 123;
			items2[0] = 123;
			items2[i] = 123;
			items3[0] = 123;
			items3[i] = 123;

			logs.push(items[0]);
			logs.push(items[i]);
			logs.push(@tracked_items[0]);
			logs.push(@tracked_items[i]);
			logs.push(items2[0]);
			logs.push(items2[i]);
			logs.push(items3[0]);
			logs.push(items3[i]);

			items[0]++;
			items[i]++;
			@tracked_items[0]++;
			@tracked_items[i]++;
			items2[0]++;
			items2[i]++;
			items3[0]++;
			items3[i]++;

			logs.push(items[0]);
			logs.push(items[i]);
			logs.push(@tracked_items[0]);
			logs.push(@tracked_items[i]);
			logs.push(items2[0]);
			logs.push(items2[i]);
			logs.push(items3[0]);
			logs.push(items3[i]);

			logs.push(--items[0]);
			logs.push(--items[i]);
			logs.push(--@tracked_items[0]);
			logs.push(--@tracked_items[i]);
			logs.push(--items2[0]);
			logs.push(--items2[i]);
			logs.push(--items3[0]);
			logs.push(--items3[i]);
		}

		render(App);

		expect(logs).toEqual([
			undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined,
			123, 123, 123, 123, 123, 123, 123, 123,
			125, 125, 125, 125, 125, 125, 125, 125,
			124, 123, 124, 123, 124, 123, 124, 123
		]);
	});

	it('renders without crashing using mapped types', () => {
		component App() {
			type RecordKey = 'test';
			type RecordValue = { a: string, b: number };

			const config: Record<RecordKey, RecordValue> = {
				test: {
					a: 'test',
					b: 1
				},
			};

			const config2: { [key in RecordKey]: RecordValue } = {
				test: {
					a: 'test2',
					b: 2
				}
			}

			const config3: { [key: RecordKey]: RecordValue } = {
				test: {
					a: 'test3',
					b: 3
				}
			}
		}

		render(App);
	});

	it('renders without crashing using object destructuring', () => {
		component App() {
			const obj = { a: 1, b: 2, c: 3 };
			const { a, b, ...rest } = obj;

			<div>
				{'a '}{a} {'b '} {b} {'rest '} {JSON.stringify(rest)}

				<div>

				</div>
			</div>
		}

		render(App);
	});

	it('renders without crashing using object destructuring #2', () => {
		component App() {
			const obj = { a: 1, b: 2, c: 3 };
			const { a, b, ...rest } = obj;

			{'a '}{a} {'b '} {b} {'rest '} {JSON.stringify(rest)}

			<div>

			</div>
		}

		render(App);
	});

	it('should not fail with random TS syntax', () => {
		function tagFn() {
			return null;
		}

		function Wrapper() {
		return {
				unwrap: function<T>() {
				return null as unknown as T;
				}
			}
		}

		component App() {
			let x: number[] = [] as number[];

			const n = new Wrapper<number>().unwrap<string>();

			const tagResult = tagFn`value`;

			interface Node<T> {
				value: T;
			}

			class Box<T> {
				value: T;

				method<T>(): T {
				return this.value;
				}
			}

			let flag = true;

			const s = flag ? new Box<number>() : new Box<string>();
		}

		render(App);
	});
});
