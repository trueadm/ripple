import { track, flushSync } from 'ripple';
import { TRACKED_ARRAY } from '../../../src/runtime/internal/client/constants.js';

describe('basic client > collections', () => {
	it('renders with simple reactive objects', () => {
		component Basic() {
			let user = track({
				name: 'John',
				age: 25
			});

			<div class='name'>{@user.name}</div>
			<div class='age'>{@user.age}</div>
			<button onClick={() => {
				@user = {...@user, name: 'Jane', age: 30}
			}}>{'Update User'}</button>
		}

		render(Basic);

		const nameDiv = container.querySelector('.name');
		const ageDiv = container.querySelector('.age');
		const button = container.querySelector('button');

		expect(nameDiv.textContent).toBe('John');
		expect(ageDiv.textContent).toBe('25');

		button.click();
		flushSync();

		expect(nameDiv.textContent).toBe('Jane');
		expect(ageDiv.textContent).toBe('30');
	});

	it('renders with nested reactive objects', () => {
		component Basic() {
			let user = track({
				name: track('John'),
				age: track(25)
			});

			<div class='name'>{@user.@name}</div>
			<div class='age'>{@user.@age}</div>
			<button onClick={() => {
				@user.@name = 'Jane';
				@user.@age = 30;
			}}>{'Update User'}</button>
		}

		render(Basic);

		const nameDiv = container.querySelector('.name');
		const ageDiv = container.querySelector('.age');
		const button = container.querySelector('button');

		expect(nameDiv.textContent).toBe('John');
		expect(ageDiv.textContent).toBe('25');

		button.click();
		flushSync();

		expect(nameDiv.textContent).toBe('Jane');
		expect(ageDiv.textContent).toBe('30');
	});

	it('works as a reactive TrackedArray when constructed using # syntactic sugar', () => {
		component App() {
			const array = #[1, 2, 3];

			<pre>{String(array[3])}</pre>
			<pre>{array[0]}</pre>
			<pre>{TRACKED_ARRAY in array}</pre>

			<button onClick={() => { array.push(array.length + 1); array[0] = array[0] + 1 }}>{'Add'}</button>
		}

		render(App);

		const pre1 = container.querySelectorAll('pre')[0];
		const pre2 = container.querySelectorAll('pre')[1];
		const pre3 = container.querySelectorAll('pre')[2];
		const button = container.querySelector('button');

		expect(pre1.textContent).toBe('undefined');
		expect(pre2.textContent).toBe('1');
		expect(pre3.textContent).toBe('true');

		button.click();
		flushSync();

		expect(pre1.textContent).toBe('4');
		expect(pre2.textContent).toBe('2');
	});
});
