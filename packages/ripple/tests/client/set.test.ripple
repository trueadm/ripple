import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { mount, flushSync, TrackedSet, track } from 'ripple';

describe('TrackedSet', () => {
  let container;

  function render(component) {
    mount(component, {
      target: container
    });
  }

  beforeEach(() => {
    container = document.createElement('div');
    document.body.appendChild(container);
  });

  afterEach(() => {
    document.body.removeChild(container);
    container = null;
  });

  it('handles add and delete operations', () => {
    component SetTest() {
      let items = new TrackedSet([1, 2, 3]);

      <button onClick={() => items.add(4)}>{'add'}</button>
      <button onClick={() => items.delete(2)}>{'delete'}</button>
      <Child items={items} />
    }

    component Child({ items }) {
      <pre>{JSON.stringify(items)}</pre>
      <pre>{items.size}</pre>
    }

    render(SetTest);

    const addButton = container.querySelectorAll('button')[0];
    const deleteButton = container.querySelectorAll('button')[1];

    addButton.click();
    flushSync();

    expect(container.querySelectorAll('pre')[0].textContent).toBe('[1,2,3,4]');
    expect(container.querySelectorAll('pre')[1].textContent).toBe('4');

    deleteButton.click();
    flushSync();

    expect(container.querySelectorAll('pre')[0].textContent).toBe('[1,3,4]');
    expect(container.querySelectorAll('pre')[1].textContent).toBe('3');
  });

  it('handles clear operation', () => {
    component SetTest() {
      let items = new TrackedSet([1, 2, 3]);

      <button onClick={() => items.clear()}>{'clear'}</button>
      <Child items={items} />
    }

    component Child({ items }) {
      <pre>{JSON.stringify(items)}</pre>
      <pre>{items.size}</pre>
    }

    render(SetTest);

    const clearButton = container.querySelector('button');

    clearButton.click();
    flushSync();

    expect(container.querySelectorAll('pre')[0].textContent).toBe('[]');
    expect(container.querySelectorAll('pre')[1].textContent).toBe('0');
  });

  it('handles has operation', () => {
    component SetTest() {
      let items = new TrackedSet([1, 2, 3]);
      let hasValue = track(() => items.has(2));

      <button onClick={() => items.delete(2)}>{'delete'}</button>
      <pre>{@hasValue}</pre>
    }

    render(SetTest);

    expect(container.querySelectorAll('pre')[0].textContent).toBe('true');

    const deleteButton = container.querySelectorAll('button')[0];

    deleteButton.click();
    flushSync();

    expect(container.querySelectorAll('pre')[0].textContent).toBe('false');
  });
});
