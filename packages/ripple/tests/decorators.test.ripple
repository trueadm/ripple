import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { mount, flushSync, RippleArray } from 'ripple';

describe('@use element decorators', () => {
	let container;

	function render(component) {
		mount(component, {
			target: container
		});
	}

	beforeEach(() => {
		container = document.createElement('div');
		document.body.appendChild(container);
	});

	afterEach(() => {
		document.body.removeChild(container);
		container = null;
	});

	it('capture a <div>', () => {
		let div;

		component Component() {
			<div {@use (node) => { div = node; }}>{'Hello World'}</div>
		}
		render(Component);
		flushSync();
		expect(div.textContent).toBe('Hello World');
	});

	it('works with spreading from composite component', () => {
		let _node;

		component Component() {
			let items = RippleArray.from([1, 2, 3]);

			function ref(node) {
				_node = node;
			}

			<Child {@use ref} {items} />
		}

		component Child(props) {
			const { items, ...rest } = props;
			<pre {...rest}>{JSON.stringify(items)}</pre>
			<pre>{items.$length}</pre>
		}

		render(Component);
		flushSync();

		expect(_node).toBe(document.querySelector('pre'));
	})
});
