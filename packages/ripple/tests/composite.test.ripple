import { describe, it, expect, beforeEach, afterEach } from 'vitest';

import { mount, flushSync } from 'ripple';

describe('composite components', () => {
	let container;

	function render(component) {
		mount(component, {
			target: container
		});
	}

	beforeEach(() => {
		container = document.createElement('div');
		document.body.appendChild(container);
	});

	afterEach(() => {
		document.body.removeChild(container);
		container = null;
	});

	it('renders composite components', () => {
		component Button({ $count }) {
			<div>{$count}</div>
		}

		component App() {
			let $count = 0;

			<button onClick={() => $count++}>{'Increment'}</button>
			<Button $count={$count} />
		}

		render(App);

		const button = container.querySelector('button');

		button.click();
		flushSync();

		expect(container.querySelector('div').textContent).toBe('1');

		button.click();
		flushSync();

		expect(container.querySelector('div').textContent).toBe('2');
	});

	it('renders composite components with object state', () => {
		component Button({ obj }) {
			<button class='count2' onClick={() => {
				obj.$count++;
			}}>{obj.$count}</button>
		}

		component App() {
			<div>
				let obj = {
					$count: 0
				};
				let $button = true;

				<span class='count'>{obj.$count}</span>
				<span>{' '}</span>
				<Button obj={obj} />
			</div>
		}

		render(App);

		const button = container.querySelector('button');

		button.click();
		flushSync();

		expect(container.querySelector('.count').textContent).toBe('1');
		expect(container.querySelector('.count2').textContent).toBe('1');
	});

	it('renders composite components with object state', () => {
		component Button({ obj }) {
			<button class='count2' onClick={() => {
				obj.$count++;
			}}>{obj.$count}</button>
		}

		component App() {
			<div>
				let obj = {
					$count: 0
				};

				<span class='count'>{obj.$count}</span>
				<Button obj={obj} />
			</div>
		}

		render(App);

		const button = container.querySelector('button');

		button.click();
		flushSync();

		expect(container.querySelector('.count').textContent).toBe('1');
		expect(container.querySelector('.count2').textContent).toBe('1');
	});

	it('renders composite components with object state wrapped in an if statement', () => {
		component Button({ obj }) {
			<button class='count2' onClick={() => {
				obj.$count++;
			}}>{obj.$count}</button>
		}

		component OtherComponent({ obj }) {
			<div class='count3'>{obj.$count}</div>
		}

		component App() {
			<div>
				let obj = {
					$count: 0
				};
				let $button = true;

				<span class='count'>{obj.$count}</span>
				<span>{' '}</span>
				if (obj) {
					<Button obj={obj} />
				}

				if (obj) {
					<OtherComponent obj={obj} />
				}
			</div>
		}

		render(App);

		const button = container.querySelector('button');

		button.click();
		flushSync();

		expect(container.querySelector('.count').textContent).toBe('1');
		expect(container.querySelector('.count2').textContent).toBe('1');
		expect(container.querySelector('.count3').textContent).toBe('1');
	});
});